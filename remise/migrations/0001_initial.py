# Generated by Django 5.1 on 2024-08-18 20:00

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0001_initial'),
        ('restaurant', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="Le code que l'utilisateur doit saisir pour obtenir la remise.", max_length=50, unique=True, verbose_name='Code de remise')),
                ('discount_type', models.CharField(choices=[('percentage', 'Pourcentage'), ('fixed', 'Montant fixe')], help_text='Le type de remise, soit en pourcentage, soit en montant fixe.', max_length=20, verbose_name='Type de remise')),
                ('value', models.DecimalField(decimal_places=2, help_text="La valeur de la remise. Si c'est un pourcentage, entrez un nombre entre 0 et 100.", max_digits=10, verbose_name='Valeur de la remise')),
                ('min_order_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Le montant minimum de la commande pour que la remise soit applicable.', max_digits=10, null=True, verbose_name='Montant minimum de commande')),
                ('start_date', models.DateTimeField(help_text="La date et l'heure à partir desquelles la remise est active.", verbose_name='Date de début')),
                ('end_date', models.DateTimeField(help_text="La date et l'heure après lesquelles la remise n'est plus applicable.", verbose_name='Date de fin')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si la remise est actuellement active.', verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Remise',
                'verbose_name_plural': 'Remises',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Le nom du programme de fidélité.', max_length=100, verbose_name='Nom du programme')),
                ('points_per_euro', models.DecimalField(decimal_places=2, help_text='Nombre de points attribués pour chaque euro dépensé.', max_digits=10, verbose_name='Points par euro dépensé')),
                ('start_date', models.DateTimeField(help_text="La date et l'heure à partir desquelles le programme est actif.", verbose_name='Date de début')),
                ('end_date', models.DateTimeField(blank=True, help_text="La date et l'heure après lesquelles le programme n'est plus actif.", null=True, verbose_name='Date de fin')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si le programme est actuellement actif.', verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Programme de fidélité',
                'verbose_name_plural': 'Programmes de fidélité',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(help_text='Le nombre de points accumulés.', verbose_name='Points')),
                ('earned_date', models.DateTimeField(auto_now_add=True, help_text='La date à laquelle les points ont été acquis.', verbose_name="Date d'acquisition")),
                ('expiry_date', models.DateTimeField(blank=True, help_text='La date à laquelle les points expirent.', null=True, verbose_name="Date d'expiration")),
                ('client', models.ForeignKey(help_text='Le profil utilisateur associé à ces points de fidélité.', on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_points', to='account.profile', verbose_name='Profil')),
                ('program', models.ForeignKey(help_text='Le programme de fidélité dans lequel les points sont accumulés.', on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_points', to='remise.loyaltyprogram', verbose_name='Programme de fidélité')),
            ],
            options={
                'verbose_name': 'Point de fidélité',
                'verbose_name_plural': 'Points de fidélité',
                'ordering': ['-earned_date'],
            },
        ),
        migrations.CreateModel(
            name='UsedDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('used_at', models.DateTimeField(auto_now_add=True, help_text="La date et l'heure auxquelles la remise a été utilisée.", verbose_name="Date d'utilisation")),
                ('client', models.ForeignKey(help_text='Le profil utilisateur ayant utilisé la remise.', on_delete=django.db.models.deletion.CASCADE, related_name='used_discounts', to='account.profile', verbose_name='Profil')),
                ('discount', models.ForeignKey(help_text='La remise utilisée.', on_delete=django.db.models.deletion.CASCADE, related_name='used_discounts', to='remise.discount', verbose_name='Remise')),
                ('order', models.ForeignKey(help_text='La commande dans laquelle la remise a été appliquée.', on_delete=django.db.models.deletion.CASCADE, related_name='used_discounts', to='restaurant.order', verbose_name='Commande')),
            ],
            options={
                'verbose_name': 'Remise utilisée',
                'verbose_name_plural': 'Remises utilisées',
                'ordering': ['-used_at'],
            },
        ),
    ]
