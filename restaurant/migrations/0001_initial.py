# Generated by Django 5.1 on 2024-08-18 20:00

import django.core.validators
import django.db.models.deletion
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('name', models.CharField(help_text='Le nom du menu.', max_length=255, verbose_name='Nom')),
                ('slug', models.SlugField(help_text='Un identifiant unique dérivé du nom du menu, utilisé dans les URL.', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Une brève description du menu.', null=True, verbose_name='Description')),
                ('menu_photo', models.ImageField(blank=True, default='photos/profile/user_picture/user_img.png', help_text='Une photo représentant le menu.', null=True, upload_to='photos/menu', verbose_name='Photo pour Menu')),
            ],
            options={
                'verbose_name': 'Menu',
                'verbose_name_plural': 'Menus',
                'ordering': ['-created_at'],
                'get_latest_by': 'created_at',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('name', models.CharField(help_text="Le nom de la méthode de paiement, par exemple, 'Carte de Crédit'.", max_length=255, verbose_name='Nom de la méthode')),
                ('description', models.TextField(blank=True, help_text='Une description facultative de la méthode de paiement.', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Méthode de paiement',
                'verbose_name_plural': 'Méthodes de paiement',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AddressRestaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('address_type', models.CharField(choices=[('facturation', 'Facturation'), ('siege', 'Siège Social'), ('principale', 'Principale')], help_text="Le type d'adresse, par exemple, Facturation, Siège Social, ou Principale.", max_length=255, verbose_name="Type d'adresse")),
                ('street', models.CharField(blank=True, help_text="La rue associée à l'adresse.", max_length=255, verbose_name='Rue')),
                ('city', models.CharField(blank=True, help_text="La ville où se situe l'adresse.", max_length=50, verbose_name='Ville')),
                ('zip_code', models.CharField(blank=True, help_text="Le code postal de l'adresse.", max_length=10, verbose_name='Code Postal')),
                ('country', models.CharField(blank=True, help_text="Le pays de l'adresse.", max_length=50, verbose_name='Pays')),
            ],
            options={
                'verbose_name': 'Adresse de restaurant',
                'verbose_name_plural': 'Adresses de restaurants',
                'ordering': ['-created_at'],
                'get_latest_by': 'created_at',
                'indexes': [models.Index(fields=['address_type'], name='restaurant__address_d1d1a5_idx')],
                'unique_together': {('street', 'city', 'zip_code', 'country')},
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('user', models.OneToOneField(help_text="L'utilisateur propriétaire de ce panier.", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Panier',
                'verbose_name_plural': 'Paniers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CategoryMenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Le nom de la catégorie.', max_length=255, verbose_name='Nom')),
                ('slug', models.SlugField(help_text='Un identifiant unique dérivé du nom de la catégorie, utilisé dans les URL.', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Une brève description de la catégorie.', max_length=255, verbose_name='Description')),
                ('cat_image', models.ImageField(blank=True, help_text='Une image représentative de la catégorie.', upload_to='photos/category', verbose_name='Image de la catégorie')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si la catégorie est active ou non.', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='La catégorie parente si cette catégorie est une sous-catégorie.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='restaurant.categorymenuitem', verbose_name='Catégorie parente')),
            ],
            options={
                'verbose_name': "Catégorie d'article de menu",
                'verbose_name_plural': "Catégories d'articles de menu",
                'ordering': ['name'],
                'unique_together': {('name', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('name', models.CharField(help_text="Le nom de l'élément de menu.", max_length=255, verbose_name='Nom')),
                ('slug', models.SlugField(help_text="Un identifiant unique dérivé du nom de l'élément, utilisé dans les URL.", max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text="Une brève description de l'élément de menu.", null=True, verbose_name='Description')),
                ('price', models.DecimalField(decimal_places=2, help_text="Le prix de l'élément de menu.", max_digits=6, verbose_name='Prix')),
                ('is_from_kitchen', models.BooleanField(default=True, help_text='Indique si cet élément est préparé en cuisine ou au bar.', verbose_name='Provenant de la cuisine')),
                ('category', models.ForeignKey(help_text='La catégorie à laquelle appartient cet élément de menu.', on_delete=django.db.models.deletion.CASCADE, to='restaurant.categorymenuitem', verbose_name='Catégorie')),
                ('menu', models.ForeignKey(help_text='Le menu auquel cet élément est associé.', on_delete=django.db.models.deletion.CASCADE, to='restaurant.menu', verbose_name='Menu')),
            ],
            options={
                'verbose_name': 'Élément de menu',
                'verbose_name_plural': 'Éléments de menu',
                'ordering': ['-created_at'],
                'get_latest_by': 'created_at',
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('quantity', models.PositiveIntegerField(help_text="La quantité de l'élément de menu ajoutée au panier.", verbose_name='Quantité')),
                ('cart', models.ForeignKey(help_text='Le panier auquel cet article est associé.', on_delete=django.db.models.deletion.CASCADE, to='restaurant.cart', verbose_name='Panier')),
                ('menu_item', models.ForeignKey(help_text="L'élément de menu ajouté au panier.", on_delete=django.db.models.deletion.CASCADE, to='restaurant.menuitem', verbose_name='Élément de menu')),
            ],
            options={
                'verbose_name': 'Article du panier',
                'verbose_name_plural': 'Articles du panier',
                'ordering': ['menu_item'],
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='items',
            field=models.ManyToManyField(help_text="Les articles ajoutés au panier par l'utilisateur.", through='restaurant.CartItem', to='restaurant.menuitem', verbose_name='Articles'),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('order_type', models.CharField(choices=[('dine_in', 'Sur place'), ('takeaway', 'À emporter')], help_text='Indique si la commande est sur place ou à emporter.', max_length=10, verbose_name='Type de commande')),
                ('order_number', models.IntegerField(help_text='Le numéro unique de la commande.', unique=True, verbose_name='Numéro de commande')),
                ('client_name', models.CharField(blank=True, help_text='Nom du client pour une commande sur place sans compte.', max_length=255, null=True, verbose_name='Nom du client (si sans compte)')),
                ('table_number', models.CharField(blank=True, help_text='Numéro de table pour une commande sur place.', max_length=10, null=True, verbose_name='Numéro de table')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('accepted', 'Acceptée'), ('preparing', 'En préparation'), ('ready', 'Prête'), ('delivered', 'Livré'), ('canceled', 'Annulée')], help_text='Le statut actuel de la commande.', max_length=50, verbose_name='Statut de la commande')),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Le montant total de la commande.', max_digits=10, verbose_name='Montant total')),
                ('note', models.TextField(blank=True, help_text='Une note optionnelle concernant la commande.', null=True, verbose_name='Note')),
                ('client', models.ForeignKey(blank=True, help_text='Le client qui a passé la commande. Peut être vide si la commande est sur place sans compte.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='Client')),
                ('staff', models.ForeignKey(help_text='Le membre du personnel responsable de la commande.', on_delete=django.db.models.deletion.CASCADE, related_name='staff_orders', to=settings.AUTH_USER_MODEL, verbose_name='Staff')),
            ],
            options={
                'verbose_name': 'Commande',
                'verbose_name_plural': 'Commandes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('quantity', models.PositiveIntegerField(help_text='La quantité commandée pour cet élément de menu.', verbose_name='Quantité')),
                ('note', models.TextField(blank=True, help_text='Une note optionnelle pour cet élément de commande.', null=True, verbose_name='Note')),
                ('menu_item', models.ForeignKey(help_text="L'élément de menu commandé.", on_delete=django.db.models.deletion.CASCADE, to='restaurant.menuitem', verbose_name='Élément de menu')),
                ('order', models.ForeignKey(help_text='La commande à laquelle cet élément est associé.', on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='restaurant.order', verbose_name='Commande')),
            ],
            options={
                'verbose_name': 'Élément de commande',
                'verbose_name_plural': 'Éléments de commande',
                'ordering': ['-created_at'],
                'get_latest_by': 'created_at',
            },
        ),
        migrations.AddField(
            model_name='order',
            name='items',
            field=models.ManyToManyField(related_name='orders', through='restaurant.OrderItem', to='restaurant.menuitem', verbose_name='Articles'),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Le montant total payé pour la commande.', max_digits=10, verbose_name='Montant')),
                ('status', models.CharField(help_text="Le statut actuel du paiement, par exemple 'Payé', 'En attente', etc.", max_length=50, verbose_name='Statut')),
                ('order', models.OneToOneField(help_text='La commande associée à ce paiement.', on_delete=django.db.models.deletion.CASCADE, to='restaurant.order', verbose_name='Commande')),
                ('payment_method', models.ForeignKey(help_text='La méthode utilisée pour effectuer le paiement.', on_delete=django.db.models.deletion.CASCADE, to='restaurant.paymentmethod', verbose_name='Méthode de paiement')),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'ordering': ['-created_at'],
                'get_latest_by': 'created_at',
            },
        ),
        migrations.CreateModel(
            name='PhotoMenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('photo', models.ImageField(help_text="La photo de l'élément de menu.", upload_to='photos/menu_items', verbose_name='Photo')),
                ('alt_text', models.CharField(blank=True, help_text="Texte alternatif pour l'image, utilisé pour l'accessibilité.", max_length=255, null=True, verbose_name='Texte alternatif')),
                ('menu_item', models.ForeignKey(help_text="L'élément de menu auquel cette photo est associée.", on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='restaurant.menuitem', verbose_name='Élément de menu')),
            ],
            options={
                'verbose_name': "Photo d'élément de menu",
                'verbose_name_plural': "Photos d'éléments de menu",
                'ordering': ['-created_at'],
                'get_latest_by': 'created_at',
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('name', models.CharField(help_text='Le nom du restaurant.', max_length=255, verbose_name='Nom du restaurant')),
                ('slug', models.SlugField(help_text='Un identifiant unique dérivé du nom, utilisé dans les URLs.', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Une brève description du restaurant.', null=True, verbose_name='Description')),
                ('logo', models.ImageField(blank=True, help_text='Le logo du restaurant.', null=True, upload_to='restaurant/logos/', verbose_name='Logo')),
                ('addresses', models.ForeignKey(blank=True, help_text="L'adresse principale du restaurant.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='main_address', to='restaurant.addressrestaurant', verbose_name='Adresse principale')),
                ('staff', models.ManyToManyField(limit_choices_to={'roles__name__in': ['admin', 'moderateur']}, related_name='restaurants', to=settings.AUTH_USER_MODEL, verbose_name='Personnel')),
            ],
            options={
                'verbose_name': 'Restaurant',
                'verbose_name_plural': 'Restaurants',
                'ordering': ['-created_at'],
                'get_latest_by': 'created_at',
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('number_of_people', models.PositiveIntegerField(help_text='Le nombre de personnes pour cette réservation.', verbose_name='Nombre de personnes')),
                ('reservation_date', models.DateTimeField(help_text="La date et l'heure de la réservation.", verbose_name='Date de la réservation')),
                ('special_request', models.TextField(blank=True, help_text='Toute demande spéciale pour cette réservation.', null=True, verbose_name='Demande spéciale')),
                ('user', models.ForeignKey(help_text="L'utilisateur qui a effectué la réservation.", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('restaurant', models.ForeignKey(help_text='Le restaurant où la réservation est effectuée.', on_delete=django.db.models.deletion.CASCADE, to='restaurant.restaurant', verbose_name='Restaurant')),
            ],
            options={
                'verbose_name': 'Réservation',
                'verbose_name_plural': 'Réservations',
                'ordering': ['-reservation_date'],
            },
        ),
        migrations.AddField(
            model_name='order',
            name='restaurant',
            field=models.ForeignKey(help_text='Le restaurant où la commande a été passée.', on_delete=django.db.models.deletion.CASCADE, to='restaurant.restaurant', verbose_name='Restaurant'),
        ),
        migrations.AddField(
            model_name='menu',
            name='restaurant',
            field=models.ForeignKey(help_text='Le restaurant auquel ce menu est associé.', on_delete=django.db.models.deletion.CASCADE, to='restaurant.restaurant', verbose_name='Restaurant'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Très mauvais'), (2, '2 - Mauvais'), (3, '3 - Correct'), (4, '4 - Bon'), (5, '5 - Excellent')], help_text="La note donnée à l'élément de menu, sur une échelle de 1 à 5.", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Note')),
                ('comment', models.TextField(blank=True, help_text="Un commentaire optionnel sur l'élément de menu.", null=True, verbose_name='Commentaire')),
                ('menu_item', models.ForeignKey(help_text="L'élément de menu sur lequel l'utilisateur laisse un avis.", on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='restaurant.menuitem', verbose_name='Élément de menu')),
                ('user', models.ForeignKey(help_text="L'utilisateur qui laisse la note et l'avis.", on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Avis',
                'verbose_name_plural': 'Avis',
                'ordering': ['-created_at'],
                'get_latest_by': 'created_at',
            },
        ),
        migrations.CreateModel(
            name='TypeMenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('name', models.CharField(help_text="Le nom du type d'élément de menu.", max_length=255, verbose_name='Nom')),
                ('slug', models.SlugField(help_text="L'identifiant unique du type d'élément de menu.", max_length=255, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text="Une brève description du type d'élément de menu.", null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': "Type d'élément de menu",
                'verbose_name_plural': "Types d'éléments de menu",
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='restaurant__name_30945a_idx')],
                'unique_together': {('name',)},
            },
        ),
        migrations.AddField(
            model_name='menuitem',
            name='type',
            field=models.ForeignKey(help_text='Le type de cet élément de menu (par exemple, plat, boisson, etc.).', on_delete=django.db.models.deletion.CASCADE, to='restaurant.typemenuitem', verbose_name='Type'),
        ),
        migrations.CreateModel(
            name='CategoryRestaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Le nom de la catégorie de restaurant.', max_length=255, verbose_name='Nom')),
                ('slug', models.SlugField(help_text='Un identifiant unique dérivé du nom de la catégorie, utilisé dans les URL.', max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Une brève description de la catégorie de restaurant.', null=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si la catégorie est active ou non.', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de la création de l'enregistrement.", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text="Date et heure de la dernière mise à jour de l'enregistrement.", verbose_name='Date de mise à jour')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='La catégorie parente si cette catégorie est une sous-catégorie.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='restaurant.categoryrestaurant', verbose_name='Catégorie parente')),
            ],
            options={
                'verbose_name': 'Catégorie de restaurant',
                'verbose_name_plural': 'Catégories de restaurants',
                'ordering': ['name'],
                'unique_together': {('name', 'slug')},
            },
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['cart', 'menu_item'], name='restaurant__cart_id_a1aff3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('cart', 'menu_item')},
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order', 'menu_item'], name='restaurant__order_i_21d94e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='orderitem',
            unique_together={('order', 'menu_item')},
        ),
        migrations.AddIndex(
            model_name='photomenuitem',
            index=models.Index(fields=['menu_item'], name='restaurant__menu_it_4d13b2_idx'),
        ),
        migrations.AddIndex(
            model_name='restaurant',
            index=models.Index(fields=['name'], name='restaurant__name_cf5999_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='restaurant',
            unique_together={('name',)},
        ),
        migrations.AddIndex(
            model_name='menu',
            index=models.Index(fields=['name', 'restaurant'], name='restaurant__name_25f7fc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='menu',
            unique_together={('name', 'restaurant')},
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['menu_item', 'user'], name='restaurant__menu_it_1deece_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('menu_item', 'user')},
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['name', 'menu'], name='restaurant__name_0490d9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='menuitem',
            unique_together={('name', 'menu')},
        ),
    ]
